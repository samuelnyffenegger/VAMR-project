function [inlier_query_keypoints, corresponding_landmarks] = initialization_patch_matching(query_image, database_image, K)
% [inlier_query_keypoints, corresponding_landmarks] =  ...
% initialization_patch_matching(query_image, database_image, K);
% establishes keypoint correspondences using patch matching, estimates the
% relative pose between frames and triangulates a point cloud of 3D
% landmarks with RANSAC to filter the outliers
% Input:
%   query_image, 2nd image --> M_12 = [R_12|t_12] 
%   database_image, 1st image --> R = eye(3), t = zeros(3,1)
%   K, 3x3 camera matrix
% Output:
%   inlier_query_keypoints, 2xN matched keypoints with RANSAC telling that
%   these are inliers, N = n_inlier_matches
%   corresponding_landmarks, 3xN 3D world point where i-th point corresponds to
%   i-th inlier_query_keypoints

%% calculations
clc

% control parameters


% parameters 
harris_patch_size = 9;
harris_kappa = 0.08;
num_keypoints = 500;
nonmaximum_supression_radius = 8;
descriptor_radius = 9;
match_lambda = 4;


% bridge
try
    % launched inside initialization_patch_matching
    query_image = img2;
    database_image = img1;
catch
    % launched outside
end


% find keypoints and descriptors
query_scores = harris(query_image, harris_patch_size, harris_kappa);
query_keypoints = selectKeypoints(query_scores, num_keypoints, nonmaximum_supression_radius);
query_descriptors = describeKeypoints(query_image, query_keypoints, descriptor_radius);

database_scores = harris(database_image, harris_patch_size, harris_kappa);
database_keypoints = selectKeypoints(database_scores, num_keypoints, nonmaximum_supression_radius);
database_descriptors = describeKeypoints(database_image, database_keypoints, descriptor_radius);


% match descriptors 
all_matches = matchDescriptors(query_descriptors, database_descriptors, match_lambda);
matched_query_mask = all_matches > 0;
matched_query_keypoints = query_keypoints(:,matched_query_mask);
matched_database_index = all_matches(all_matches > 0);
matched_database_keypoints = database_keypoints(:,matched_database_index);
assert(size(matched_database_keypoints,2) == size(matched_query_keypoints,2));
n_matched_keypoints = size(matched_database_keypoints,2);


% user normalized 8-point algorithm in RANSAC fashion to obtain fundamental matrix
[F, inliersIndex, status] = estimateFundamentalMatrix(matched_query_keypoints',matched_database_keypoints','Method','RANSAC',...
    'NumTrials',2000,'DistanceThreshold',1e-4);
if status ~= 0
    warning(['estimateFundamentalMatrix did not find enough inlier pairs, only ',n])
end




% dummy assignement such that file can be run from main
if ~exist('inlier_query_keypoints','var'); inlier_query_keypoints = NaN; end
if ~exist('corresponding_landmarks','var'); corresponding_landmarks = NaN; end

end



